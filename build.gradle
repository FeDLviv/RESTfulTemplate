buildscript {
    ext {
        springBootVersion = '2.0.5.RELEASE'
    }
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
    }
}

plugins {
    id "com.heroku.sdk.heroku-gradle" version "1.0.3"
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'

group = 'net.omisoft'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = 1.8

heroku {
    ext {
        path = "build/libs/RESTfulTemplate-${version}.jar"
        name = "rest-xxx"
        process = "java -Dserver.port=\$PORT -Dspring.profiles.active=dev -jar ${path}"
    }
    appName = "${name}"
    includes = ["${path}"]
    includeBuildDir = false
    processTypes(
            web: "${process}".toString()
    )
}

ext {
    ehcacheVersion = '2.10.5'
    swaggerVersion = '2.9.2'
    mapStructVersion = '1.2.0.Final'
    jjwtVersion = '0.9.1'
    awsVersion = '1.11.390'
}

repositories {
    mavenCentral()
}

dependencies {

    //Spring Boot
    compile('org.springframework.boot:spring-boot-starter-web')
    compile('org.springframework.boot:spring-boot-starter-data-jpa')
    //compile('org.springframework.boot:spring-boot-starter-jdbc')
    compile('org.springframework.boot:spring-boot-starter-security')
    compile('org.springframework.boot:spring-boot-starter-mail')
    compile('org.springframework.boot:spring-boot-starter-cache')
    compile('org.springframework.boot:spring-boot-starter-aop')
    compile('org.springframework.boot:spring-boot-starter-actuator')
    compile('org.springframework.boot:spring-boot-starter-thymeleaf')

    //Annotation Processor
    compileOnly('org.springframework.boot:spring-boot-configuration-processor')

    //Database
    compile('org.liquibase:liquibase-core')
    runtime('com.h2database:h2')
    runtime('org.postgresql:postgresql')
    //runtime('mysql:mysql-connector-java')

    //Retry
    compile('org.springframework.retry:spring-retry')

    //Lombok
    compileOnly('org.projectlombok:lombok')

    //Ehcache
    compile "net.sf.ehcache:ehcache:${ehcacheVersion}"

    //Swagger
    compile("io.springfox:springfox-swagger2:${swaggerVersion}")
    compile("io.springfox:springfox-swagger-ui:${swaggerVersion}")
    compile("io.springfox:springfox-bean-validators:${swaggerVersion}")

    //MapStruct
    compile("org.mapstruct:mapstruct-jdk8:${mapStructVersion}")
    compileOnly("org.mapstruct:mapstruct-processor:${mapStructVersion}")

    //JJWT
    compile("io.jsonwebtoken:jjwt:${jjwtVersion}")

    //AWS
    compile "com.amazonaws:aws-java-sdk:${awsVersion}"

    //Develop
    runtime('org.springframework.boot:spring-boot-devtools')

    //Testing
    testCompile('org.springframework.boot:spring-boot-starter-test')
    testCompile('org.springframework.security:spring-security-test')

}

test {
    testLogging {
        afterSuite { desc, result ->
            if (!desc.parent) {
                println "Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} successes, ${result.failedTestCount} failures, ${result.skippedTestCount} skipped)"
            }
        }
    }
}

bootJar {
    launchScript()
}