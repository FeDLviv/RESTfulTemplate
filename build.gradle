plugins {
    id 'org.springframework.boot' version '2.1.11.RELEASE'
    id 'io.spring.dependency-management' version '1.0.8.RELEASE'
    id 'java'
    id "org.liquibase.gradle" version "2.0.2"
    id "de.undercouch.download" version "4.0.2"
    id "com.gorylenko.gradle-git-properties" version "2.2.0"
    id "com.heroku.sdk.heroku-gradle" version "1.0.4"
}

apply from: 'JMeterPlugin.gradle'

group = 'net.omisoft'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = 1.8

configurations {
    developmentOnly
    runtimeClasspath {
        extendsFrom developmentOnly
    }
    compileOnly {
        extendsFrom annotationProcessor
    }
}

heroku {
    ext {
        path = "build/libs/RESTfulTemplate-${version}.jar"
        name = "rest-xxx"
        process = "java -Dserver.port=\$PORT -Dspring.profiles.active=dev -jar ${path}"
    }
    appName = "${name}"
    includes = ["${path}"]
    includeBuildDir = false
    processTypes(
            web: "${process}".toString()
    )
}

ext {
    adminVersion = '2.1.6'
    ehcacheVersion = '2.10.6'
    swaggerVersion = '2.9.2'
    mapStructVersion = '1.3.1.Final'
    jjwtVersion = '0.9.1'
    awsVersion = '1.11.696'
    apacheValidatorVersion = '1.6'
    specificationArgumentResolverVersion = '2.1.1'
    cucumberVersion = '4.3.1'
}

repositories {
    mavenCentral()
}

dependencies {

    //Spring Boot
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    //implementation 'org.springframework.boot:spring-boot-starter-jdbc'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-mail'
    implementation 'org.springframework.boot:spring-boot-starter-cache'
    implementation 'org.springframework.boot:spring-boot-starter-aop'
    implementation 'org.springframework.boot:spring-boot-starter-hateoas'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'

    //Annotation Processor
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
    annotationProcessor 'org.projectlombok:lombok'
    annotationProcessor "org.mapstruct:mapstruct-processor:${mapStructVersion}"

    //Database
    implementation 'org.liquibase:liquibase-core'
    runtimeOnly 'com.h2database:h2'
    runtimeOnly 'org.postgresql:postgresql'
    //runtimeOnly 'mysql:mysql-connector-java'

    //Retry
    implementation 'org.springframework.retry:spring-retry'

    //Spring Boot Admin
    implementation "de.codecentric:spring-boot-admin-starter-client:${adminVersion}"

    //Lombok
    compileOnly 'org.projectlombok:lombok'

    //Ehcache
    implementation "net.sf.ehcache:ehcache:${ehcacheVersion}"

    //Swagger
    implementation "io.springfox:springfox-swagger2:${swaggerVersion}"
    implementation "io.springfox:springfox-swagger-ui:${swaggerVersion}"
    implementation "io.springfox:springfox-bean-validators:${swaggerVersion}"

    //MapStruct
    compile "org.mapstruct:mapstruct:${mapStructVersion}"

    //JJWT
    implementation "io.jsonwebtoken:jjwt:${jjwtVersion}"

    //AWS S3
    implementation "com.amazonaws:aws-java-sdk-s3:${awsVersion}"

    //Apache Commons Validator
    implementation "commons-validator:commons-validator:${apacheValidatorVersion}"

    //Specification Argument Resolver
    implementation "net.kaczmarzyk:specification-arg-resolver:${specificationArgumentResolverVersion}"

    //Develop
    developmentOnly 'org.springframework.boot:spring-boot-devtools'

    //Testing
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'
    testAnnotationProcessor "org.mapstruct:mapstruct-processor:${mapStructVersion}"

    //Cucumber
    testImplementation "io.cucumber:cucumber-junit:${cucumberVersion}"
    implementation "io.cucumber:cucumber-java:${cucumberVersion}"
    implementation "io.cucumber:cucumber-spring:${cucumberVersion}"

}

test {
    testLogging {
        afterSuite { desc, result ->
            if (!desc.parent) {
                println "Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} successes, ${result.failedTestCount} failures, ${result.skippedTestCount} skipped)"
            }
        }
    }
}

bootJar {
    launchScript()
}

task downloadZipFile(type: Download) {
    src 'http://apache.volia.net//jmeter/binaries/apache-jmeter-5.2.1.zip'
    dest new File(buildDir, 'apache-jmeter-5.2.1.zip')
}

task downloadAndUnzipFile(type: Copy) {
    File zip = new File(buildDir, 'apache-jmeter-5.2.1.zip')
    if (!zip.exists()) {
        dependsOn downloadZipFile
    }
    File file = new File(buildDir, 'apache-jmeter-5.2.1/bin/jmeter.sh')
    if (!file.exists()) {
        from zipTree(downloadZipFile.dest)
        into buildDir
    }
}

project.tasks.jmEdit.dependsOn(downloadAndUnzipFile)
project.tasks.jmRun.dependsOn(downloadAndUnzipFile)

jmeterConfig {
    pathJMeter = buildDir.toString() + "/apache-jmeter-5.2.1/bin/jmeter.sh"
}

task postgres_db {
    doLast {
        liquibase {
            activities {
                main {
                    changeLogFile "$projectDir/src/main/resources/db/changelog/db.changelog-master.xml"
                    url 'jdbc:postgresql://localhost:5432/xxx?currentSchema=public'
                    username 'postgres'
                    password 'postgres'
                }
            }
            dependencies {
                liquibaseRuntime 'org.liquibase:liquibase-core:3.8.1'
                liquibaseRuntime 'org.liquibase:liquibase-groovy-dsl:2.0.1'
                liquibaseRuntime 'org.postgresql:postgresql'
                liquibaseRuntime 'ch.qos.logback:logback-core:1.2.3'
                liquibaseRuntime 'ch.qos.logback:logback-classic:1.2.3'
            }
        }
    }
}